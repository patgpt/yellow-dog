/**
 * @fileoverview Root layout component for the application
 * @module app/layout
 */

import { routing } from '@/i18n/routing'

import { geistMono, geistSans } from '@/styles/fonts'

import '@/styles/globals.css'
import { cn } from '@/utils/cn'
import logger from '@/utils/logger'
import type { Metadata } from 'next'
import { NextIntlClientProvider } from 'next-intl'
import { getMessages, setRequestLocale } from 'next-intl/server'

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app'
}

/**
 * Generate static params for all supported locales
 * @returns {Promise<Array<{params: {locale: string}}>>} Array of locale params
 */
export async function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }))
}

interface RootLayoutProps {
  children: React.ReactNode
  params: { locale: string }
}

export default async function RootLayout({ children, params }: RootLayoutProps) {
  // Validate and set locale
  const locale = params.locale || routing.defaultLocale

  if (!routing.locales.includes(locale as Locale)) {
    logger.warn('Invalid locale detected, falling back to default', {
      detectedLocale: locale,
      defaultLocale: routing.defaultLocale
    })
  }

  try {
    const messages = await getMessages({ locale })
    setRequestLocale(locale)

    return (
      <html lang={locale}>
        <NextIntlClientProvider locale={locale} messages={messages}>
          <body
            className={cn(
              geistSans.variable, // Apply Geist Sans font variable
              geistMono.variable, // Apply Geist Mono font variable
              'antialiased' // Enable font smoothing
            )}
          >
            {children}
          </body>
        </NextIntlClientProvider>
      </html>
    )
  } catch (error) {
    logger.error('Failed to load messages', { locale, error })
    throw error
  }
}
